}
}
bitch2.0(data)
head(data)
data$Truth[6] = "TRUE"
head(data)
data$Truth[6] = "FALSE"
head(data)
bitch2.0 = function(x) {
for(patientID in 1:nrow(x)) {
for(col in 1:ncol(x)) {
if(!is.na(x[patientID, col])) {
if(substr(x[patientID, col], 1, 4) == "Neit") {
x$Truth[patientID] = "TRUE"
print("YES")
break
}
}
}
}
}
bitch2.0(data)
for(patientID in 1:nrow(data)) {
for(col in 1:ncol(data)) {
if(!is.na(data[patientID, col])) {
if(substr(data[patientID, col], 1, 4) == "Neit") {
data$Truth[patientID] = "TRUE"
print("YES")
break
}
}
}
}
head(data)
data$hasDiabetes = "FALSE"
head(data)
data=survey
data$Diabetes = 0
head(data)
for(patientID in 1:nrow(data)) {
for(col in 1:ncol(data)) {
if(!is.na(data[patientID, col])) {
if(substr(data[patientID, col], 1, 4) == "A10A") {
data$Diabetes[patientID] = 1
break
}
}
}
}
install.packages('tidyverse')
library(tidyverse)
pokemon=read.csv("\Downloads\pokemon.csv")
pokemon=read.csv("/Downloads/pokemon.csv")
pokemon=read.csv("/Users/pandoro/Downloads")
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
head(pokemon)
pokemon %>%
select(name, percentage_male) %>%
mutate(
percentage_female = 1 - percentage_male
)
pokemon %>%
select(name, percentage_male) %>%
mutate(
percentage_female = 100 - percentage_male
)
?count
head(pokemon)
pokemon %>%
count(classification, wt=type1)
pokemon %>%
count(classfication, wt=type1)
pokemon %>%
count(type1, wt=base_total)
pokemon %>%
count(type1, wt=weight_kg)
pokemon %>%
count(type1, wt=classfication)
pokemon %>%
count(classfication, wt=weight_kg)
pokemon %>%
count(classfication)
pokemon %>%
count(type1)
ggplot(data, aes(species, size, fill=pestcontrol)) + geom_boxplot()
ggplot(apples, aes(species, size, fill=pestcontrol)) + geom_boxplot()
head(pokemon)
ggplot(pokemon, aes(type1, , fill=pestcontrol)) + geom_boxplot()
factor(generation)
factor(pokemon$generation)
factor(type2)
factor(pokeomn$type2)
factor(pokemon$type2)
factor(pokemon$type1)
head(pokemon)
ggplot(pokemon, aes(type1, hp, fill=is_legendary)) + geom_boxplot()
ggplot(pokemon, aes(type1, hp, fill=is_legendary)) + geom_bar()
means <- aggregate(pokemon$attack, list(pokemon$type1), mean)
means
?geom_bar
ggplot(means, aes(Group.1, x)) + geom_bar(stat="bin", width=0.7, fill="red")
ggplot(means, aes(Group.1, x)) + geom_bar(width=0.7, fill="red")
rlang::last_error()
ggplot(means, aes(x=Group.1, y=x)) + geom_bar(stat="identity", width=0.7, fill="red")
ggplot(means, aes(x=Group.1, y=x)) + geom_bar(stat="identity", width=0.7, fill="steelblue")
ggplot(means, aes(x=Group.1, y=x)) + geom_bar(stat="identity", width=0.5, fill="steelblue")
ggplot(means, aes(x=Group.1, y=x)) + geom_bar(stat="identity", width=0.6, fill="steelblue")
ggplot(means, aes(x=Group.1, y=x)) + geom_bar(stat="identity", width=0.7, fill="steelblue")
?geom_text
?aggregate
names(means)[names(means) == "Group.1"] <- "Types"
names(means)[names(means) == "x"] <- "Average attack"
head(means)
ggplot(means, aes(x=Types, y=Average attack)) + geom_bar(stat="identity", width=0.7, fill="steelblue")
names(means)[names(means) == "Average attack"] <- "Average_attack"
names(means)[names(means) == "Average_attack"] <- "x"
names(means)[names(means) == "x"] <- "Average_attack"
head(means)
ggplot(means, aes(x=Types, y=Average_attack)) + geom_bar(stat="identity", width=0.7, fill="steelblue")
pokemon %>%
seperate()
head(pokemons)
head(pokemon)
pokemon %>%
seperate(abilities, into=c("abilities1", "abilities2"))
separate(abilities, into=c("abilities1", "abilities2"))
pokemon %>%
separate(abilities, into=c("abilities1", "abilities2"))
pokemon %>%
separate(abilities, into=c("abilities1", "abilities2"), sep=",")
pokemon %>%
.
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
pokemon %>%
unite(types, type1, type2, sep = ", ")
head(pokemon %>%
unite(types, type1, type2, sep = ", "))
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
head(pokemon)
head(pokemon %>%
unite(types, type1, type2, sep = ", "))
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
head(pokemon %>%
unite(name_translation, japanese_name, name, sep = "-->"))
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
pokemon %>%
unite(name_translation, japanese_name, name, sep = "-->")
pokemon=read.csv("/Users/pandoro/Downloads/pokemon.csv")
head(pokemon[,28:31])
pokemon %>%
unite(name_translation, japanese_name, name, sep = "-->")
head(pokemon[,28:31])
head(pokemon[,28:31])
head(pokemon[,28:32])
head(pokemon)
head(pokemon %>%
unite(name_translation, japanese_name, name, sep = "-->"))
View(data)
View(bzvz)
library(tidyverse)
dat<-read.table("/Users/pandoro/Downloads",header=T)
subj1 <- dat %>% filter(subjNo == 1)
library(tidyverse)
dat<-read.table("/Users/pandoro/Downloads/decision(1).dat",header=T)
subj1 <- dat %>% filter(subjNo == 1)
View(dat)
onlyDots <- subj1 %>% filter(isDots == 1)
head(onlyDots)
library(tidyverse)
summary(onlyDots)
sum(onlyDots$subjNo)
library(tidyverse)
dat<-read.table("/Users/pandoro/Downloads/decision(1).dat",header=T)
subj1 <- dat %>% filter(subjNo == 1)
onlyDots <- subj1 %>% filter(isDots == 1)
onlyCorrect <- onlyDots %>% filter(ER == 0)
head(onlyCorrect)
lowFactor <- onlyCorrect %>% filter(cohFac == 0)
highFactor <- onlyCorrect %>% filter(cohFac == 1)
t.test(lowFactor$RT, highFactor$RT, paired = TRUE)
sum(lowFactor$subjNo)
sum(highFactor$subjNo)
t.test(mean(lowFactor$RT), mean(highFactor$RT), paired = TRUE)
t.test(lowFactor$RT, highFactor$RT, paired = FALSE)
onlyDotsAll <- dat[dat$isDots==1,]
avByBlock <- onlyDotsAll %>% group_by(blocknum, subjNo) %>% summarise_all(mean)
head(avByBlock)
avByCohFac <- onlyDotsAll %>% group_by(cohFac, subjNo) %>% summarise_all(mean)
head(avByCohFac)
onlyDotsAll <- dat[dat$isDots==1,]
onlyCorrectAll <- dat[dat$ER==0,]
sum(onlyCorrectAll$ER)
onlyDotsAll <- dat[dat$isDots==1,]
onlyCorrectAll <- dat[dat$ER==0,]
avByCohFac <- onlyCorrectAll %>% group_by(cohFac, subjNo) %>% summarise_all(mean)
head(avByCohFac)
lowFactorAll <- avByCohFac[avByCohFac$cohFac==0,]
highFactorAll <- avByCohFac[avByCohFac$cohFac==1,]
head(lowFactorAll)
head(highFactorAll)
t.test(lowFactorAll$RT, highFactorAll$RT, paired = TRUE)
ttest <- t.test(lowFactorAll$RT, highFactorAll$RT, paired = TRUE)
ttest$statistic
mean(lowFactorAll$RT)
mean(highFactorAll$RT)
sd(lowFactorAll$RT)
sd(highFactorAll$RT)
t.test(lowFactorAll$RT, highFactorAll$RT, paired = TRUE)
mean(lowFactorAll$RT)
mean(highFactorAll$RT)
sd(lowFactorAll$RT)
sd(highFactorAll$RT)
library(lsr)
install.packages(lsr)
install.packages("lsr")
library(lsr)
?cohensD
library(lsr)
cohensD(lowFactorAll$RT, highFactorAll$RT)
?wilcox.test
wilcox.test(lowFactorAll$RT, highFactorAll$RT, paired = TRUE)
wilcox.test(lowFactorAll$RT, highFactorAll$RT)
wilcox.test(lowFactorAll$RT, highFactorAll$RT, paired = TRUE)
median(lowFactorAll$RT)
median(highFactorAll$RT)
sd(lowFactorAll$RT)
sd(highFactorAll$RT)
summary(aov(RT ~ factor(cohFac), data = onlyCorrect))
t.test(lowFactor$RT, highFactor$RT, paired = TRUE)
t.test(lowFactor$RT, highFactor$RT)
subj1 <- dat %>% filter(subjNo == 1)
onlyDots <- subj1 %>% filter(isDots == 1)
onlyCorrect <- onlyDots %>% filter(ER == 0)
lowFactor <- onlyCorrect %>% filter(cohFac == 0)
highFactor <- onlyCorrect %>% filter(cohFac == 1)
t.test(lowFactor$RT, highFactor$RT)
sd(lowFactor$RT)
sd(highFactor$RT)
mean(lowFactor$RT)
?boxplot
boxplot(RT ~ factor(cohFac), onlyCorrectAll)
boxplot(RT ~ factor(cohFac), onlyCorrect)
etaSquared(lowFactor$RT, highFactor$RT)
?etaSquared
etaSquared(aov(RT ~ factor(cohFac), data = onlyCorrect))
?interaction.plot
summary(aov(RT ~ isLeft*cohFac, data = onlyCorrectAll))
summary(aov(RT ~ factor(isLeft)*factor(cohFac), data = onlyCorrectAll))
interaction.plot(x.factor = onlyCorrectAll$cohFac,
trace.factor = onlyCorrectAll$isLeft,
response = onlyCorrectAll$RT,
fun = median, #metric to plot
ylab = "Weight Loss",
xlab = "Exercise Intensity",
trace.label = "Gender")
summary(aov(RT ~ factor(isLeft)*factor(cohFac), data = onlyCorrectAll))
interaction.plot(x.factor = onlyCorrectAll$cohFac,
trace.factor = onlyCorrectAll$isLeft,
response = onlyCorrectAll$RT,
fun = mean,
ylab = "Average response time",
xlab = "Coherence factor",
trace.label = "isLeft")
interaction.plot(x.factor = onlyCorrectAll$cohFac,
trace.factor = onlyCorrectAll$isLeft,
response = onlyCorrectAll$RT,
ylab = "Average response time",
xlab = "Coherence factor",
trace.label = "isLeft")
summary(aov(RT ~ factor(isLeft)*factor(cohFac), data = onlyCorrectAll))
interaction.plot(x.factor = onlyCorrectAll$cohFac,
trace.factor = onlyCorrectAll$isLeft,
response = onlyCorrectAll$RT,
ylab = "Average response time",
xlab = "Coherence factor",
trace.label = "isLeft")
dat
onlyCorrectAll
avByCohFac
max(avByCohFac$subjNo)
sum(avByCohFac$cohFac)
max(onlyCorrectAll$subjNo)
sum(onlyCorrectAll$subjNo)
sum(avByCohFac$subjNo)
bzvz=onlyCorrectAll %>% group_by(subjNo) %>% summarise_all(mean)
bzvz
bzvz1 = onlyCorrectAll[onlyCorrectAll$cohFac==0,]
bzvz2 = onlyCorrectAll[onlyCorrectAll$cohFac==1,]
bzvz=bzvz1 %>% group_by(subjNo) %>% summarise_all(mean)
bzvz
?group_by
sum(bzvz$subjNo)
install.packages("rstatix")
library(rstatix)
?anova_test
anova_test(data = onlyCorrectAll, dv = RT, wid = subjNo, within = c(isLeft, cohFac))
anova_test(data = avByCohFac, dv = RT, wid = subjNo, within = c(isLeft, cohFac))
summary(aov(RT ~ factor(isLeft)*factor(cohFac), data = avByCohFac))
install.packages("nortest")
?lillie.test
library(nortest)
?lillie.test
lillie.test(onlyCorrectAll)
lillie.test(onlyCorrectAll$cohFac)
lillie.test(onlyCorrectAll$isLeft)
lillie.test(onlyCorrectAll$RT)
library(nortest)
lillie.test(onlyCorrectAll$isLeft)
lillie.test(onlyCorrectAll$cohFac)
anova_test(data = onlyCorrectAll, dv = RT, wid = subjNo, within = c(isLeft, cohFac))
?aov
anova_test(data = onlyCorrectAll, dv = RT, wid = subjNo, within = c(cohFac, isLeft))
ggplot(batting, aes(x=teamID, y=H)) + geom_boxplot()
with(batting, boxplot(H ~ teamID))
library(UsingR)
ggplot(batting, aes(x=teamID, y=H)) + geom_boxplot()
with(batting, boxplot(H ~ teamID))
?dbinom
?replicate
x = replicate (10000 , sum(rnorm(7 ,30 ,6) < rnorm(7 ,30 ,6))==7)
x
mean(x)
?dbinom
?rnorm
sort(rnorm(30,30,6))[1:7]
library(ggplot2)
diamonds
?prop.test
library(UsingR)
samhda
with(samhda,table(marijuana))
?replicate
m <- mean(diamonds$price)
s <- sd(diamonds$price)
hist(log10(diamonds$price), prob=TRUE,
xlab="log10(price)", ylab="Probability",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=s),
add=TRUE, yaxt="n")
library(UsingR)
m <- mean(diamonds$price)
s <- sd(diamonds$price)
hist(log10(diamonds$price), prob=TRUE,
xlab="log10(price)", ylab="Probability",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=s),
add=TRUE, yaxt="n")
hist(log10(diamonds$price), prob=TRUE, xlab="log10(price)", ylab="Probability", main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=s), add=TRUE, yaxt="n")
?log
?rbinom
?tail
?sort
?tail
?prop.test
?sample
?sort
library(UsingR)
g g pl o t ( diamonds , a e s ( x=log ( p r i c e ) ) ) + geom hi s t o g r am ( a e s (
y =.
. density . . ) ) + stat function ( fun = dnorm, args =
l i s t (mean = mean(log ( diamonds$ p r i c e ) ) , sd = sd(log (
diamonds$ p r i c e ) ) ) )
ggplot (diamonds , aes(x=log(price))) + geomhistogram(aes(y =..density..)) + statfunction(fun = dnorm, args = list(mean = mean(log(diamonds$price)), sd = sd(log(diamonds$price))))
library(ggplot2)
ggplot (diamonds , aes(x=log(price))) + geomhistogram(aes(y =..density..)) + statfunction(fun = dnorm, args = list(mean = mean(log(diamonds$price)), sd = sd(log(diamonds$price))))
ggplot (diamonds , aes(x=log(price))) + geom_histogram(aes(y =..density..)) + statfunction(fun = dnorm, args = list(mean = mean(log(diamonds$price)), sd = sd(log(diamonds$price))))
ggplot (diamonds , aes(x=log(price))) + geom_histogram(aes(y =..density..)) + stat_function(fun = dnorm, args = list(mean = mean(log(diamonds$price)), sd = sd(log(diamonds$price))))
ggplot(data.frame(x=rep l i c a t e ( 1 0 0 0 0 , mean( sort (rnorm
( 3 0 , 3 0 , 6 ) ) [ 2 3 : 3 0 ] ) ) ) , a e s ( x=x ) ) + geom hi s t o g r am ( a e s ( y
=.
. density . . ) ) + stat function ( fun = dnorm, args =
l i s t (mean = 3 0 , sd = 6 ) )
ggplot(diamonds, aes(x = cut , y = clarity , fill = carat)) + geom_tile() + scalefillgradient(limits = c(0.3, 1.361) , low = ”green” , high = ”red ” )
ggplot(diamonds, aes(x = cut , y = clarity , fill = carat)) + geom_tile() + scalefillgradient(limits = c(0.3, 1.361) , low = "green" , high = "red" )
ggplot(diamonds, aes(x = cut , y = clarity , fill = carat)) + geom_tile() + scale_fill_gradient(limits = c(0.3, 1.361) , low = "green" , high = "red" )
ggplot(diamonds, aes(x = cut , y = clarity , fill = carat)) + geom_tile() + scale_fill_gradient(limits = c(0.3, 1.361))
?head
library(UsingR)
plot(diamonds$price, diamonds$carat)
aggregate ( carat ~ clarity + cut , data = diamonds , mean )
ggplot ( diamonds , aes ( clarity , cut , fill = depth )) + geom _ tile ()
ggplot ( diamonds , aes ( clarity , cut , fill = depth )) + geom_tile()
rivers
rivers[-23]
head(rivers, -23)
head(rivers, -7)
df <- data.frame(x=replicate(10000, mean(head(sort(rnorm(30, 30,6), decreasing = TRUE), -23)))
)
df
rivers
head(rivers, -23)
?hist
?pbinom
?prop.test
?t.test
?pbinom
?rnorm
c(1,2,3,4,5,6,7,8,9,10)
a = c(1,2,3,4,5,6,7,8,9,10)
a[-9]
library(UsingR)
gr1=(sleep[sleep$group==1, ]
)$extra
gr2=(sleep[sleep$group==2, ]
)$extra
gr1-gr2
gplot ( sleep , aes ( x = group , y = extra ) ) + geom_boxplot ()
ggplot ( sleep , aes ( x = group , y = extra ) ) + geom_boxplot ()
prop.test(52,100,conf.level = 0.99)
prop.test(52,100, 0.52,conf.level = 0.99)
?prop.test
?pbinom
prop.test(52, 100, 1/2, conf.level=0.99)
sleep
extra
ith(sleep, extra[group ==
2] - extra[group == 1)
ith(sleep, extra[group ==
2] - extra[group == 1])
with(sleep, extra[group==1])
?wilcox.test
?phyper
?pbinom
probHigher = 1 - phyper(55, 40000, 60000, 100)
probLowerThanLowerBound = phyper(44, 40000, 60000, 100)
p = 1 - probLowerThanLowerBound - probHigher
p
?prop.test
t . t e s t ( s l e e p $e x t r a [ s l e e p $group==2]−s l e e p $e x t r a [ s l e e p $group ==1]
t.test(sleep$extra[sleep$group==2]−sleep$extra[sleep$group ==1]
t.test(sleep$extra[sleep$group==2]−sleep$extra[sleep$group ==1],mu=0, conf.level = 0.95)
t.test(sleep$extra[sleep$group==2]−sleep$extra[sleep$group ==1],mu=0, conf.level = 0.95)
pbinom(55, 100, 4/10) - pbinom(45, 100, 4/10)
library(limma)
install.packages("limma")
?aggregate
diamonds
install.packages("ggplot2")
diamonds
install.packages("UsingR")
diamonds
gc()
?aggregate
?log
?rnorm
?pnorm
?aggregate
MASS
library(MASS)
survey
?mean
?nrow
?aggregate
library(MASS)
aggregate(Height ~ SMoke + W.Hnd,survey,median)
aggregate(Height ~ Smoke + W.Hnd,survey,median)
?rnorm
?sd
subset <- subset ( survey , Smoke == ’ Heavy ’ | Smoke == ’ Occas ’ | Smoke == ’ Regul ’)
subset <- subset ( survey , Smoke == 'Heavy' | Smoke ==  'Occas'  | Smoke == ’ Regul ’)
subset <- subset ( survey , Smoke == 'Heavy' | Smoke ==  'Occas'  | Smoke ==  'Regul')
trimmedSubset <- na . omit ( subset )
trimmedSubset <- na.omit( subset )
trimmedSubset
mean(trimmedSubset$Pulse)
subset <- subset ( survey , Smoke != "Never")
trimmedSubset <- na.omit(subset)
mean(trimmedSubset$Pulse)
length(trimmedSubset)
subset <- subset ( survey , Smoke == 'Heavy' | Smoke ==  'Occas'  | Smoke ==  'Regul')
trimmedSubset <- na.omit(subset)
length(trimmedSubset)
binom.test()
?binom.test
data <- c (
5.4 , 6.1 , 6.2 , 6.4 , 6.4 , 6.4 , 6.8 , 6.9 , 8.4 , 9.7 ,
4.8 , 4.8 , 5.1 , 5.2 , 5.3 , 5.4 , 5.8 , 6.6 , 6.7 , 7.7 ,
5.1 , 5.6 , 5.6 , 6.5 , 6.6 , 6.7 , 6.7 , 6.9 , 7.2 , 7.4 ,
4.7 , 5.1 , 5.2 , 5.8 , 6.2 , 6.2 , 6.2 , 7.1 , 7.6 , 7.7)
control_samples <- matrix ( sample ( data , 10 * 3 , replace = TRUE ) , nrow = 10)
control_samples
control_means <- rowMeans ( control_samples )
control_means
setwd("/Users/pandoro/Documents/Thesis/reward_machines/results/summary")
origDataCRM <- read.table("office-crm.txt")
origDataCRM <- read.table("office-crm.txt")
origDataCRMRS <- read.table("office-crm-rs.txt")
origDataHRM <- read.table("office-hrm.txt")
origDataHRMRS <- read.table("office-hrm-rs.txt")
origDataQL <- read.table("office-ql.txt")
origDataQLRS <- read.table("office-ql-rs.txt")
setwd("/Users/pandoro/Documents/Thesis/reward_machines/test_results/summary")
myDataCRM <- read.table("office-crm.txt")
myDataCRMRS <- read.table("office-crm-rs.txt")
myDataHRM <- read.table("office-hrm.txt")
myDataHRMRS <- read.table("office-hrm-rs.txt")
myDataQL <- read.table("office-ql.txt")
myDataQLRS <- read.table("office-ql-rs.txt")
myDataCRM <- myDataCRM[-c(4,15,16,19,21,22,32), ]
myDataCRM <- read.table("office-crm.txt")
origDataCRM <- origDataCRM[-c(4,15,16,19,21,22,32), ]
origDataCRMRS <- origDataCRMRS[-c(9,17,20), ]
origDataHRM <- origDataHRM[-c(3,4), ]
origDataHRMRS <- origDataHRMRS[-c(10,13,14), ]
origDataQL <- origDataQL[-c(29,61,64,65,97), ]
origDataQLRS <- origDataQLRS[-c(15,19,23,27,41,46,50,72,73,77,99), ]
?t.test
t.test(myDataCRM, origDataCRM)
t.test(myDataCRM$V3, origDataCRM$V3)
t.test(myDataCRMRS$V3, origDataCRMRS$V3)
t.test(myDataCRMRS$V3, origDataCRMRS$V3, paired = TRUE)
